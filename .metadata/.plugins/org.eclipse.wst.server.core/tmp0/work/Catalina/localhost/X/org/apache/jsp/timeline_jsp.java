/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.19
 * Generated at: 2025-06-02 18:10:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import model.User;
import model.Post;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.time.format.DateTimeFormatter;

public final class timeline_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(7);
    _jspx_imports_classes.add("model.Post");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.time.format.DateTimeFormatter");
    _jspx_imports_classes.add("model.User");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

User loginUser = (User) session.getAttribute("loginUser");
List<Post> posts = (List<Post>) request.getAttribute("posts");

if (loginUser == null) {
	response.sendRedirect("login.jsp");
	return;
}

DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");

// 投稿を親投稿と返信投稿に分ける準備
List<Post> parentPosts = new ArrayList<>();
Map<Integer, List<Post>> repliesMap = new HashMap<>();

if (posts != null) {
	for (Post post : posts) {
		Integer parentId = post.getParentPostId();
		if (parentId == null) {
	parentPosts.add(post);
		} else {
	repliesMap.computeIfAbsent(parentId, k -> new ArrayList<>()).add(post);
		}
	}
}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>タイムライン</title>\r\n");
      out.write("<style>\r\n");
      out.write("body {\r\n");
      out.write("	font-family: 'Helvetica', sans-serif;\r\n");
      out.write("	background-color: #f0f2f5;\r\n");
      out.write("	margin: 0;\r\n");
      out.write("	padding: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".container {\r\n");
      out.write("	max-width: 600px;\r\n");
      out.write("	margin: 30px auto;\r\n");
      out.write("	background: #fff;\r\n");
      out.write("	border-radius: 10px;\r\n");
      out.write("	padding: 20px;\r\n");
      out.write("	box-shadow: 0 0 8px rgba(0, 0, 0, 0.1);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".welcome {\r\n");
      out.write("	font-size: 20px;\r\n");
      out.write("	margin-bottom: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".welcome a {\r\n");
      out.write("	text-decoration: none;\r\n");
      out.write("	color: #333;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".post-form {\r\n");
      out.write("	margin-bottom: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".post-textarea {\r\n");
      out.write("	width: 100%;\r\n");
      out.write("	padding: 10px;\r\n");
      out.write("	border-radius: 8px;\r\n");
      out.write("	border: 1px solid #ccc;\r\n");
      out.write("	font-size: 14px;\r\n");
      out.write("	resize: vertical;\r\n");
      out.write("	box-sizing: border-box;\r\n");
      out.write("	word-wrap: break-word; /* 改良 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".post-button {\r\n");
      out.write("	background-color: #1da1f2;\r\n");
      out.write("	color: #fff;\r\n");
      out.write("	border: none;\r\n");
      out.write("	padding: 8px 14px;\r\n");
      out.write("	border-radius: 20px;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("	font-size: 14px;\r\n");
      out.write("	/* float解除してflexで右寄せに変更 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".post-button:hover {\r\n");
      out.write("	background-color: #0d8ddb;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".logout-link {\r\n");
      out.write("	display: inline-block;\r\n");
      out.write("	margin-top: 10px;\r\n");
      out.write("	color: #888;\r\n");
      out.write("	text-decoration: none;\r\n");
      out.write("	font-size: 14px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".logout-link:hover {\r\n");
      out.write("	text-decoration: underline;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".post-list {\r\n");
      out.write("	margin-top: 30px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".post-item {\r\n");
      out.write("	background: #fefefe;\r\n");
      out.write("	padding: 15px;\r\n");
      out.write("	border-radius: 10px;\r\n");
      out.write("	margin-bottom: 15px;\r\n");
      out.write("	border: 1px solid #ddd;\r\n");
      out.write("	max-width: 100%;\r\n");
      out.write("	word-wrap: break-word; /* 長い文章の折り返し */\r\n");
      out.write("	box-sizing: border-box;\r\n");
      out.write("	position: relative;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".post-user {\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("	color: #333;\r\n");
      out.write("	margin-bottom: 5px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".post-content {\r\n");
      out.write("	font-size: 15px;\r\n");
      out.write("	margin: 10px 0;\r\n");
      out.write("	white-space: pre-wrap;\r\n");
      out.write("	word-wrap: break-word; /* ここも追加 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".post-date {\r\n");
      out.write("	font-size: 12px;\r\n");
      out.write("	color: #999;\r\n");
      out.write("	margin-bottom: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".action-row {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("	justify-content: space-between;\r\n");
      out.write("	margin-top: 10px;\r\n");
      out.write("	flex-wrap: wrap; /* 横幅狭くなったときの折返し対応 */\r\n");
      out.write("	gap: 8px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".like-button {\r\n");
      out.write("	background: transparent;\r\n");
      out.write("	border: none;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("	font-size: 16px;\r\n");
      out.write("	color: #e0245e;\r\n");
      out.write("	display: flex;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("	gap: 6px;\r\n");
      out.write("	padding: 4px 8px;\r\n");
      out.write("	border-radius: 20px;\r\n");
      out.write("	transition: background-color 0.2s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".like-button:hover {\r\n");
      out.write("	background-color: #ffe6f0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".like-text {\r\n");
      out.write("	font-size: 18px;\r\n");
      out.write("	line-height: 1;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".like-count {\r\n");
      out.write("	font-size: 14px;\r\n");
      out.write("	color: #555;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".reply-form {\r\n");
      out.write("	flex-grow: 1;\r\n");
      out.write("	display: flex;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("	gap: 8px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".reply-textarea {\r\n");
      out.write("	flex-grow: 1;\r\n");
      out.write("	padding: 6px 10px;\r\n");
      out.write("	border-radius: 8px;\r\n");
      out.write("	border: 1px solid #ccc;\r\n");
      out.write("	font-size: 14px;\r\n");
      out.write("	resize: vertical;\r\n");
      out.write("	height: 40px;\r\n");
      out.write("	box-sizing: border-box;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".reply-submit {\r\n");
      out.write("	background-color: #1da1f2;\r\n");
      out.write("	color: #fff;\r\n");
      out.write("	border: none;\r\n");
      out.write("	padding: 6px 14px;\r\n");
      out.write("	border-radius: 20px;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("	font-size: 14px;\r\n");
      out.write("	white-space: nowrap;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".reply-submit:hover {\r\n");
      out.write("	background-color: #0d8ddb;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".delete-form {\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	top: 10px;\r\n");
      out.write("	right: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".delete-button {\r\n");
      out.write("	background-color: #e0e0e0;\r\n");
      out.write("	color: #555;\r\n");
      out.write("	border: none;\r\n");
      out.write("	padding: 5px 12px;\r\n");
      out.write("	border-radius: 15px;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("	font-size: 12px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".delete-button:hover {\r\n");
      out.write("	background-color: #ccc;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 返信投稿の見た目 */\r\n");
      out.write(".reply-item {\r\n");
      out.write("	margin-left: 30px;\r\n");
      out.write("	background-color: #f9f9f9;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".post-user {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("	justify-content: space-between;\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("	color: #333;\r\n");
      out.write("	margin-bottom: 5px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* フォローしていない状態（目立つ） */\r\n");
      out.write(".follow-button {\r\n");
      out.write("	background-color: #1da1f2; /* 青 */\r\n");
      out.write("	color: #fff;\r\n");
      out.write("	border: none;\r\n");
      out.write("	padding: 5px 12px;\r\n");
      out.write("	border-radius: 15px;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("	font-size: 12px;\r\n");
      out.write("	transition: background-color 0.2s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* ホバー時 */\r\n");
      out.write(".follow-button:hover {\r\n");
      out.write("	background-color: #0d8ddb;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* フォローしている状態（目立たない） */\r\n");
      out.write(".follow-button.following {\r\n");
      out.write("	background-color: #ddd; /* グレー */\r\n");
      out.write("	color: #555; /* 文字も薄め */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* フォロー解除ホバー時（少し濃く） */\r\n");
      out.write(".follow-button.following:hover {\r\n");
      out.write("	background-color: #bbb;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("\r\n");
      out.write("		<h1 class=\"welcome\">\r\n");
      out.write("			<a href=\"profile?user_id=");
      out.print(loginUser.getId());
      out.write('"');
      out.write('>');
      out.write(' ');
      out.print(loginUser.getName());
      out.write("のタイムライン\r\n");
      out.write("			</a>\r\n");
      out.write("		</h1>\r\n");
      out.write("\r\n");
      out.write("		<form action=\"post\" method=\"post\" class=\"post-form\">\r\n");
      out.write("			<textarea name=\"content\" rows=\"3\" maxlength=\"280\" required\r\n");
      out.write("				placeholder=\"今どうしてる？\" class=\"post-textarea\"></textarea>\r\n");
      out.write("			<button type=\"submit\" class=\"post-button\">投稿</button>\r\n");
      out.write("		</form>\r\n");
      out.write("\r\n");
      out.write("		<a href=\"logout\" class=\"logout-link\">ログアウト</a>\r\n");
      out.write("\r\n");
      out.write("		<div class=\"post-list\">\r\n");
      out.write("			");

			// 親投稿を表示
			for (Post parentPost : parentPosts) {
			
      out.write("\r\n");
      out.write("			<div class=\"post-item\">\r\n");
      out.write("				<p class=\"post-user\">\r\n");
      out.write("					<span>");
      out.print(parentPost.getUserName());
      out.write("</span>\r\n");
      out.write("\r\n");
      out.write("					");

					int postUserId = parentPost.getUserId();
					boolean isSelf = (postUserId == loginUser.getId());
					Boolean isFollowing = (Boolean) request.getAttribute("isFollowing_" + postUserId);
					Integer followerCount = (Integer) request.getAttribute("followerCount_" + postUserId);
					if (!isSelf) {
						String followClass = (isFollowing != null && isFollowing) ? "follow-button following" : "follow-button";
						String followText = (isFollowing != null && isFollowing) ? "フォロー中" : "フォロー";
					
      out.write("\r\n");
      out.write("					<button class=\"");
      out.print(followClass);
      out.write("\" data-user-id=\"");
      out.print(postUserId);
      out.write('"');
      out.write('>');
      out.print(followText);
      out.write("</button>\r\n");
      out.write("					");

					}
					
      out.write("\r\n");
      out.write("				</p>\r\n");
      out.write("\r\n");
      out.write("				<p class=\"post-content\">");
      out.print(parentPost.getContent());
      out.write("</p>\r\n");
      out.write("				<p class=\"post-date\">");
      out.print(parentPost.getCreatedAt().format(formatter));
      out.write("</p>\r\n");
      out.write("\r\n");
      out.write("				<div class=\"action-row\">\r\n");
      out.write("					<!-- いいねボタン -->\r\n");
      out.write("					<button class=\"like-button\" data-post-id=\"");
      out.print(parentPost.getId());
      out.write("\">\r\n");
      out.write("						<span class=\"like-text\">");
      out.print(parentPost.isLikedByCurrentUser() ? "♥" : "♡");
      out.write("</span>\r\n");
      out.write("						<span class=\"like-count\">");
      out.print(parentPost.getLikeCount());
      out.write("</span>\r\n");
      out.write("					</button>\r\n");
      out.write("\r\n");
      out.write("					<!-- formを使用したいいねボタン -->\r\n");
      out.write("					");
      out.write("\r\n");
      out.write("\r\n");
      out.write("					");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("					<!-- 削除ボタン -->\r\n");
      out.write("					");

					if (parentPost.getUserId() == loginUser.getId()) {
					
      out.write("\r\n");
      out.write("					<form action=\"delete\" method=\"post\" class=\"delete-form\"\r\n");
      out.write("						onsubmit=\"return confirm('この投稿を削除しますか？');\">\r\n");
      out.write("						<input type=\"hidden\" name=\"post_id\"\r\n");
      out.write("							value=\"");
      out.print(parentPost.getId());
      out.write("\">\r\n");
      out.write("						<button type=\"submit\" class=\"delete-button\">削除</button>\r\n");
      out.write("					</form>\r\n");
      out.write("					");

					}
					
      out.write("\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<!-- 返信フォーム -->\r\n");
      out.write("				<form action=\"post\" method=\"post\" class=\"reply-form\"\r\n");
      out.write("					style=\"margin-top: 10px;\">\r\n");
      out.write("					<input type=\"hidden\" name=\"parent_post_id\"\r\n");
      out.write("						value=\"");
      out.print(parentPost.getId());
      out.write("\">\r\n");
      out.write("					<textarea name=\"content\" maxlength=\"280\" required\r\n");
      out.write("						placeholder=\"返信する\" class=\"reply-textarea\"></textarea>\r\n");
      out.write("					<button type=\"submit\" class=\"reply-submit\">返信</button>\r\n");
      out.write("				</form>\r\n");
      out.write("			</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("			");

			// 返信投稿を表示
			List<Post> replies = repliesMap.get(parentPost.getId());
			if (replies != null) {
				for (Post reply : replies) {
			
      out.write("\r\n");
      out.write("			<div class=\"post-item reply-item\">\r\n");
      out.write("				<p class=\"post-user\">");
      out.print(reply.getUserName());
      out.write("</p>\r\n");
      out.write("				<p class=\"post-content\">");
      out.print(reply.getContent());
      out.write("</p>\r\n");
      out.write("				<p class=\"post-date\">");
      out.print(reply.getCreatedAt().format(formatter));
      out.write("</p>\r\n");
      out.write("\r\n");
      out.write("				<!-- いいねボタン -->\r\n");
      out.write("				<button class=\"like-button\" data-post-id=\"");
      out.print(reply.getId());
      out.write("\">\r\n");
      out.write("					<span class=\"like-text\">");
      out.print(reply.isLikedByCurrentUser() ? "♥" : "♡");
      out.write("</span>\r\n");
      out.write("					<span class=\"like-count\">");
      out.print(reply.getLikeCount());
      out.write("</span>\r\n");
      out.write("				</button>\r\n");
      out.write("\r\n");
      out.write("				");

				if (reply.getUserId() == loginUser.getId()) {
				
      out.write("\r\n");
      out.write("				<form action=\"delete\" method=\"post\" class=\"delete-form\"\r\n");
      out.write("					onsubmit=\"return confirm('この投稿を削除しますか？');\">\r\n");
      out.write("					<input type=\"hidden\" name=\"post_id\" value=\"");
      out.print(reply.getId());
      out.write("\">\r\n");
      out.write("					<button type=\"submit\" class=\"delete-button\">削除</button>\r\n");
      out.write("				</form>\r\n");
      out.write("				");

				}
				
      out.write("\r\n");
      out.write("			</div>\r\n");
      out.write("			");

			}
			}
			}
			
      out.write("\r\n");
      out.write("		</div>\r\n");
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<!--  <script>\r\n");
      out.write("document.querySelectorAll('.like-button').forEach(button => {\r\n");
      out.write("	button.addEventListener('click', function () {\r\n");
      out.write("		const postId = this.dataset.postId;\r\n");
      out.write("\r\n");
      out.write("		// POSTリクエストを送信\r\n");
      out.write("		fetch('like', {\r\n");
      out.write("			method: 'POST',\r\n");
      out.write("			headers: {\r\n");
      out.write("				'Content-Type': 'application/x-www-form-urlencoded'\r\n");
      out.write("			},\r\n");
      out.write("			body: 'post_id=' + encodeURIComponent(postId)\r\n");
      out.write("		})\r\n");
      out.write("		.then(response => {\r\n");
      out.write("			if (!response.ok) {\r\n");
      out.write("				// ステータスエラー（例: 401 Unauthorized）\r\n");
      out.write("				console.error('HTTP error:', response.status);\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			return response.json();\r\n");
      out.write("		})\r\n");
      out.write("		.then(data => {\r\n");
      out.write("			if (!data) return; // 無効なレスポンスの場合\r\n");
      out.write("\r\n");
      out.write("			// 自動でページをリロード\r\n");
      out.write("			location.reload();\r\n");
      out.write("		})\r\n");
      out.write("		.catch(error => {\r\n");
      out.write("			console.error(\"通信エラー:\", error);\r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("});\r\n");
      out.write("</script> -->\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("document.querySelectorAll('.like-button').forEach(button => {\r\n");
      out.write("	button.addEventListener('click', function () {\r\n");
      out.write("		const postId = this.dataset.postId;\r\n");
      out.write("\r\n");
      out.write("		// POSTリクエストを送信\r\n");
      out.write("		fetch('like', {\r\n");
      out.write("			method: 'POST',\r\n");
      out.write("			headers: {\r\n");
      out.write("				'Content-Type': 'application/x-www-form-urlencoded'\r\n");
      out.write("			},\r\n");
      out.write("			body: 'post_id=' + encodeURIComponent(postId)\r\n");
      out.write("		})\r\n");
      out.write("		.finally(() => {\r\n");
      out.write("			// 通信成功・失敗にかかわらず常にページリロード\r\n");
      out.write("			location.reload();\r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("});\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("document.querySelectorAll('.follow-button').forEach(button => {\r\n");
      out.write("	button.addEventListener('click', function () {\r\n");
      out.write("		const followeeId = this.dataset.userId;\r\n");
      out.write("\r\n");
      out.write("		// POSTリクエストを送信\r\n");
      out.write("		fetch('follow', {\r\n");
      out.write("			method: 'POST',\r\n");
      out.write("			headers: {\r\n");
      out.write("				'Content-Type': 'application/x-www-form-urlencoded'\r\n");
      out.write("			},\r\n");
      out.write("			body: 'followee_id=' + encodeURIComponent(followeeId)\r\n");
      out.write("		})\r\n");
      out.write("		.finally(() => {\r\n");
      out.write("			// 通信成功・失敗にかかわらず常にページリロード\r\n");
      out.write("			location.reload();\r\n");
      out.write("		});\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	});\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
